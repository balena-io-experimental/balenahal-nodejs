/**
 * balenahal
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";


export default class GpioApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    exportGpioWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling exportGpio");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    exportGpio(pin) {
      return this.exportGpioWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getValueWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling getValue");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/gpio/get_value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getValue(pin) {
      return this.getValueWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    setValueWithHttpInfo(value) {
      let postBody = null;
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling setValue");
      }

      let pathParams = {
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/set_value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    setValue(value) {
      return this.setValueWithHttpInfo(value)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    unexportGpioWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling unexportGpio");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/unexport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    unexportGpio(pin) {
      return this.unexportGpioWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
